{"version":3,"sources":["components/WeatherToday.js","hooks/useFetch.js","WeatherApp.js","index.js"],"names":["WeatherToday","usePosition","enableHighAccuracy","timeout","maximumAge","latitude","longitude","error","data","url","isMounted","useRef","useState","loading","state","setState","useEffect","current","fetch","then","resp","json","console","log","useFetch","WeatherApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":";sMAIaA,EAAe,WAExB,IAF8B,EAY1BC,uBALU,EALC,CACXC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,IAIdC,EAT4B,EAS5BA,SACAC,EAV4B,EAU5BA,UACAC,EAX4B,EAW5BA,MAIIC,ECjBc,SAAEC,GAEtB,IAAMC,EAAYC,kBAAO,GAFM,EAGLC,mBAAS,CAAEJ,KAAM,KAAMK,SAAS,EAAMN,MAAO,OAHxC,mBAGxBO,EAHwB,KAGjBC,EAHiB,KAoC/B,OA/BAC,qBAAW,WACP,OAAO,WACHN,EAAUO,SAAU,KAEzB,IAGHD,qBAAW,WAEPD,EAAS,CAAEP,KAAM,KAAMK,SAAS,EAAMN,MAAO,OAI7CW,MAAOT,GACFU,MAAM,SAAAC,GAAI,OAAIA,EAAKC,UAEnBF,MAAM,SAAAX,GACHc,QAAQC,IAAIb,EAAUO,SACjBP,EAAUO,SAEXF,EAAS,CACLF,SAAS,EACTN,MAAO,KACPC,cAMlB,CAACC,IAEIK,EDnBMU,CADJ,oEAAgEnB,EAAhE,YAA4EC,IAKrF,OAHAgB,QAAQC,IAAIf,GAIR,gCACI,+CACA,yCACUH,EAAS,uBADnB,cAEgBC,EAAU,uBAF1B,UAGYC,SEzBXkB,G,MAAa,WAItB,OACI,mCACE,cAAC,EAAD,QCLVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.372e47ac.chunk.js","sourcesContent":["import React from 'react'\nimport { usePosition } from 'use-position';\nimport { useFetch } from '../hooks/useFetch';\n\nexport const WeatherToday = () => {\n     \n    const options ={\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n    }\n    const watch = true;\n    const {\n      latitude,\n      longitude,\n      error,\n    } = usePosition(watch, options);    \n\n    const url = `https://www.metaweather.com/api/location/search/?lattlong=${latitude},${longitude}` \n    const data = useFetch(url)\n    console.log(data)\n    \n\n    return (\n        <div>\n            <h1>Weather Today</h1>\n            <code>\n                lat: {latitude}<br/>\n                longitude: {longitude}<br/>\n                error: {error}\n            </code>\n        </div>\n    )\n}\n","import { useState, useEffect, useRef } from 'react';\n\nexport const useFetch = ( url ) => {\n    \n    const isMounted = useRef(true);\n    const [state, setState] = useState({ data: null, loading: true, error: null });\n\n    useEffect( () => {      \n        return () => {\n            isMounted.current = false;            \n        }\n    }, [])\n    \n\n    useEffect( () => {\n\n        setState({ data: null, loading: true, error: null });\n        //!Eliminar al subir\n        //const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n        \n        fetch( url )\n            .then( resp => resp.json())\n            \n            .then( data => {\n                console.log(isMounted.current)\n                if ( isMounted.current ) {\n                  \n                    setState({\n                        loading: false,\n                        error: null,\n                        data\n                    });\n                }\n\n            });\n\n    },[url])\n\n    return state;\n}","import React from 'react'\nimport { WeatherToday } from './components/WeatherToday'\nimport './styles.css'\n\nexport const WeatherApp = () => {\n\n\n   \n    return (\n        <>     \n          <WeatherToday />  \n        </>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { WeatherApp } from './WeatherApp';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}